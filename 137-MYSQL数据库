什么是数据库
  数据库的介绍
  生活中的数据
  常见软件
  专业术语
MySQL介绍
  起源与发展
  特点和应用
MySQL服务器
        MySQL安装
                准备环境
                安装软件
                启动服务
                相关参数
        MySQL初始配置      
                初始密码登录
                修改root密码
                修改密码策略
数据库基本管理
        连接MYSQL服务
                连接方式
                数据存储流程
                mysql管理环境
        MYSQL基本操作
                库管理命令
                表管理命令
                记录管理命令

MYSQl 数据类型
        RDBMS 关系型数据库
        数据类型的种类
                数值类：体重、身高、成绩、工资
                字符型：姓名、工作单位、通信地
                枚举类：兴趣爱好、性别、专业
                日期时间型：出生日期、注册时间
表结构
约束条件
        作用是限制如何给字段赋值
        NULL
        KEY     键值     
        DEFAULT 默认值
        Extra
修改表结构
        命令 alter table 库名.表名 执行动作
                执行动作
                        添加新字段
                        修改字段类型
                        修改字段名
                        删除字段
                        修改表名
MYSQL键值
        MYSQL键值概述
                键值类型
                索引介绍
                索引优缺点
        MYSQL键值使用
                INdex普通索引
                primary key主键
                foreign key外键
数据的导入和导出
        数据导入默认检索的路径
                查看
                修改
        什么事数据导入
                什么是数据导入
                命令格式
                例子
        数据的导出
                什么事数据导出
                命令格式
                例子
管理表记录
        增加表记录 insert into
        查询表记录 select       
        更新表记录 update 修改字段的值    
        删除表记录 delete 以行为单位，删除列用的是 alter table 表 drop 字段名；      

匹配条件          
        基本匹配条件
                数值比较
                字符比较、匹配空、非空
                逻辑匹配
                范围匹配、去重显示
        高级匹配条件
                模糊搜索
                正则表达式
                四则运算
        操作查询结果
                聚集函数
                查询结果排序
                查询结果分组
                查询结果过滤
                限制查询结果显示行数


################################################################################################################################################
 什么是数据库
  数据库的介绍：存储数据的仓库
  生活中的数据：视频、音频、图片、文本
  常见软件
          软件名         开源     跨平台    厂商
          Oracle        否       是       甲骨文
          MySQL         是       是       甲骨文
          SQL Server    否       否       微软
          DB2           否       是       IBM
          Redis         是       是       开源
          Memcached     是       是       开源
          MongoDB       是       是       开源
  专业术语
        DB（Database）
                数据库
                依照某种数据模型进行组织并存放到存储器的数据集合
        DBMS（Database Management System）
                数据库管理系统
                用来操纵和管理数据库的服务软件
        DBS（Database System）
                数据库系统：DB+DBMS
                带有数据库，并整合了数据库管理软件的计算机系统
MySQL介绍
  起源与发展
        MariaDB是MYSQL开源软件
  特点和应用
        特点
                中小规模，关系型数据库
                支持Linux、Unix、Windows等多种操作系统
                支持Python、Java、Perl、PHP等编程语言
        典型的应用环境
                LAMP Apache HTTP Server组合
                LNMP 与Nginx组合
                
MySQL服务器
        MySQL安装
                准备环境
                        CentOS系统虚拟机一台
                        配置IP192.168.4.50
                        关闭Firewall
                        禁用SELinux
                        拷贝软件mysql-5.7.17.tar
                                关闭mariadb           [root@hejian_alicloud ~]# systemctl status mariadb
                                关闭开机自启动          [root@hejian_alicloud ~]# systemctl disable mariadb
                                删除mysql类配置文件     [root@hejian_alicloud ~]# rm -rf /etc/my.cnf               删除配置文件
                                                      [root@hejian_alicloud ~]# rm -rf /var/lib/mysql/*         删除数据
                                卸载mariadb            [root@hejian_alicloud ~]# rpm -e --nodeps mariadb-server mariadb   强制卸载
                        配置yum源
                安装软件
                      使用安装yum源的方法安装
                      完整教程
                      https://cloud.tencent.com/developer/article/1886339
                      1. 下载 MySQL yum包
                      wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm
                      2.安装MySQL源
                      rpm -Uvh mysql57-community-release-el7-10.noarch.rpm
                      复制
                      3.安装MySQL服务端,需要等待一些时间
                      yum install -y mysql-community-server
                      
                      出现上述提示原因是Mysql的GPG升级了，需要重新获取
                      执行： rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
                      再次进行服务安装：yum -y install mysql-server mysql    
                启动服务
                        数据库目录           [root@hejian_alicloud ~]# ls /var/lib/mysql
                        mysql的配置文件      [root@hejian_alicloud ~]# cat /etc/my.cnf       
                        [root@hejian_alicloud ~]# systemctl start mysqld
                        [root@hejian_alicloud ~]# systemctl enable mysqld
                相关参数
                        首次创建，/var/lib/mysql
                        查看进程    [root@hejian_alicloud ~]# ps -aux | grep -i mysqld
                        查看端口    [root@hejian_alicloud ~]# netstat -lnptu | grep -i 3306
                        传输协议    TCP
                        进程所属组   mysql
                        进程所有者   mysql
                        错误日志文件  /var/log/mysqld.log
                MySQL初始配置
                        管理员     root
                        首次登录密码在安装软件时，随机生成
                        随机密码在/var/log/mysqld.log里       [root@hejian_alicloud ~]# cat /var/log/mysqld.log | grep -i password
                        连接命令    mysql -h数据库地址 -u用户名 -p密码
                初始密码登录
                        [root@hejian_alicloud ~]# mysql -hlocalhost -uroot -p'Rff%j#P=P2hZ'
                        必须初始化密码
                        mysql> alter user root@"localhost" identified by "****";
                        退出后，重新登录一下
                        [root@hejian_alicloud ~]# mysql -hlocalhost -uroot -p'****'       
                修改root密码
                         策略名称                         验证方式
                         0 OR LOW                       长度
                         1 OR MEDIUM（默认）              长度；数字，小写、大写和特殊字符
                         2 OR STRONG                    长度；数字，小写、大写和特殊字符；字典文件
                         
                修改密码策略
                        查看密码策略：         mysql> show variables like "%password%";
                                            like包含
                        临时立即生效
                                set global validate_password_policy=0;//修改密码策略
                                set global validate_password_length=6;//修改密码长度
                        永久生效
                                vim /etc/my.cnf
                                [mysql]
                                validate_password_policy=0
                                validate_password_length=6
                                
数据库基本管理
        连接MYSQL服务
                连接方式
                        命令行
                                显示当前在哪个库下       mysql> select database();
                                登录时带库名            [root@hejian_alicloud ~]# mysql -uroot -p'***' mysql
                        web
                        图形
                        编写脚本（php、java、python。。）
                        连接命令    mysql -h服务器IP -u用户名 -p密码 【数据库名】
                数据存储流程
                        连接数据库服务器
                        建库                      //类似于文件夹
                        建表                      //类似于文件
                        插入记录                   //类似于文件内容 
                        断开连接
                mysql管理环境
                        SQL命令使用规则
                                SQL命令不区分字母大小写（密码、变量值除外）
                                每条SQL命令以;结束
                                默认命令不支持Tab键补齐
                                \c 终止sql命令
                        常用的SQL命令分类
                                管理数据库使用SQL（结构化查询语言）
                                DDL     数据定义语言  如：create、alter、drop
                                DML     数据操作语言  如：insert、update、delete
                                DCL     数据控制语言  如：grant、revoke
                                DTL     数据事务语言  如：commit、rollback、savepoint  
        MYSQL基本操作
                库管理命令
                        库       类似于文件夹，用来存储表
                        可以创建多个库，通过库名区分
                        mysql> show databases;                                          //显示已有库
                        mysql> select user();                                           //显示连接用户
                        mysql> use mysql;                                               //切换库
                        mysql> select database();                                       //显示当前所在库
                        mysql> create database laohe_mysql;                             //创建库
                                库名 命名规则
                                        仅可以使用数字、字母、下划线；不能使用纯数字；
                                        区分字母大小写，具有唯一性
                                        不可使用指令关键字、特殊字符
                                创建完数据库，/var/lib/mysql 下会有一个文件夹
                                        [root@hejian_alicloud mysql]# cd laohe_mysql/
                                        [root@hejian_alicloud laohe_mysql]# ls
                        mysql> show tables;                                             //显示当前库的表
                        mysql> drop database laohe_mysql;                               //删除库
                表管理命令
                        建表
                                表示存储数据的文件；
                                mysql> use laohe_mysql;
                                mysql> select database();
                                mysql> create table laohe_mysql.stuinfo(
                                    -> name char(15),
                                    -> homeaddr char(20)
                                    -> ) DEFAULT CHARSET=utf8;                          //指定中文字符集，可以给字段赋值中文
                记录管理命令
                        记录                                   
                                mysql> desc laohe_mysql.stuinfo;                        //查看表中列类型
                                mysql> select * from laohe_mysql.stuinfo;               //查看表中的具体内容
                                mysql> insert into laohe_mysql.stuinfo values("laohe","xian"),("laozhang","beijing");
                                mysql> select * from laohe_mysql.stuinfo;
                                mysql> update laohe_mysql.stuinfo set homeaddr="meiguo";  //update set 修改表内容；
                                mysql> delete from laohe_mysql.stuinfo;                   //删除表中内容，不删除表；删除表用drop
                                mysql> drop table laohe_mysql.stuinfo;                    //直接删除表
                                案例：
                                mysql> create table laohe_mysql.stuinfo( 学号 char(15), 姓名 char(15), 性别 char(15), 手机号 char(15), 通信地址 char(15) ) DEFAULT CHARSET=utf8;
                                DEFAULT CHARSET //不能小写
                                学号 char(15) 汉字不能带双引号
                                mysql> desc laohe_mysql.stuinfo;
                                mysql> show create table stuinfo;               //查看建表时的命令，能看到字符集
                                mysql> insert into laohe_mysql.stuinfo values("01","老何","男","181","西安"),("02","老张","女","152","北京");     //字符串需要加引号，其他的不加（int数值）
                                mysql> select * from laohe_mysql.stuinfo;
                                
                                
MYSQl 数据类型
        RDBMS 关系型数据库
        数据类型的种类
                数值类：体重、身高、成绩、工资
                        整形类型
                                有符号 负数
                                无符号 正数
                                        类型             名称               有符号范围              无符号范围
                                        tinyint         微小整数            -128~127               0~255
                                        smallint        小整数             -32768~32768            0~65535
                                        mediumint       中整数             -2^23~2^23-1            0~2^24-1
                                        int             大整数             -2^31~2^31-1            0~2^32-1
                                        bigint          极大整数           -2^63~2^63-1             0~2^64-1 
                                        unsigned        使用无符号存储范围
                        浮点型
                                格式1：字段1 类型；
                                格式2：字段名 类型（总宽度，小数位数）    float(7,2)总7位，小数点2位 XXXXX.XX
                                        类型                     名称              有符号/无符号范围
                                        float                   单精度             0~2^32-1
                                        double                  双精度             0~2^64-1
                字符型：姓名、工作单位、通信地
                        定长 char
                                最大字符个数255，不指定，默认为1
                                不顾指定字符个数时，在右侧用空格补齐
                                字符个数超出时，无法写入数据
                        变长 varchar
                                按数据实际大小分配存储空间
                                字符个数超出时，无法写入数据
                                varchar没有默认长度，必须写上
                        大文本类型 text、blob
                                字符数大于65535存储时，使用                 
                枚举类：兴趣爱好、性别、专业
                        字段值，只能在列举的范围内选择
                                单选 enum
                                        格式 字段名 enum（值1， 值2， 值N)
                                        仅能选择一个值
                                        字段值必选在列表里选择
                                多选 set
                                        格式 字段名 set（值1， 值2， 值N)
                                        仅能选择一个值
                                        字段值必选在列表里选择
                        mysql> create table t9 (姓名 char(10), 性别 enum("男", "女" ,"其他"), 爱好 set("吃","喝","嫖","赌")) DEFAULT CHARSET=utf8;
                        mysql> desc t9;
                        mysql> insert into t9 values("老李","其他","嫖,赌");
                        mysql> select * from t9;
                日期时间型：出生日期、注册时间
                        日期时间 datetime
                                范围：1000-01-01 00：00：00~9999-12-31 23：59：59
                                格式：yyyymmddhhmmss
                                必须赋值，不赋值为空
                                mysql> desc t8;
                                                +----------+-----------+------+-----+-------------------+-----------------------------+
                                                | Field    | Type      | Null | Key | Default           | Extra                       |
                                                +----------+-----------+------+-----+-------------------+-----------------------------+
                                                | meetting | datetime  | YES  |     | NULL              |                             |
                                                | party    | timestamp | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
                                                +----------+-----------+------+-----+-------------------+-----------------------------+
                        日期时间 timestamp
                                范围：1970-01-01 00：00：00~2038-12-31 23：59：59
                                格式：yyyymmddhhmmss
                                可以不赋值，不赋值时位系统时间
                                        mysql> create table t8 (meetting datetime, party timestamp) DEFAULT CHARSET=utf8;
                                        mysql> insert into t8(meetting) values(20220714171020);
                                        mysql> select * from t8;        //timestap 可以不赋值，默认为系统时间
                                                +---------------------+---------------------+
                                                | meetting            | party               |
                                                +---------------------+---------------------+
                                                | 2022-07-14 17:10:20 | 2022-07-14 17:12:12 |
                                                +---------------------+---------------------+
                        日期 date
                                范围：0001-01-01~9999-12-31
                                格式：yyyymmdd
                        年 year
                                范围：1901~2155
                                格式：yyyy
                                一般使用4位赋值，也可以两位
                                        01~69 2001~2069
                                        70~99 1970~1999
                        时间 time
                                格式：HH:MM:SS
                        时间函数
                                now()   year()  month() day()   date()  time()
                                curtime()       curdate()
                        mysql> create table laohe_mysql.t4(name char(10),yourstart year(4),up_time time,birthday date,party datetime) DEFAULT CHARSET=utf8;
                        yourstart year(4) 不能写成 yourstart year(4),可以用your_start代替
                        DEFAULT 别忘了字母
                        （XX,XX,XX）所有列都在一个括号下，插入数据时才是多个括号
                        create table laohe_mysql.t5 (名字 char(10),哪一年 year(4),上传时间 time,生日 date,聚会 datetime) DEFAULT CHARSET=utf8;
                        创建时，切记不能有双引号
                        mysql> desc laohe_mysql.t5;
                        查看表结构
                        mysql> insert into t5 values("老张",1990,162730,19891219,20220714162730);
                        这是正确格式，会自动转义
                        mysql> insert into laohe_mysql.t5 values("老张","1988","16:16:10","1990-01-26","2022-07-14 16:14:56");
                        有特殊符号，空格的记者加上双引号，这样不对，全部变成了字符串
                        
                        使用时间函数赋值
                        时间函数
                                now()系统当前的日期和时间    year()获取年      month()获取月     day()获取日       date()获取日期        time()获取时间
                                curtime()获取系统当前的时间       curdate()获取系统当前日期
                        mysql> select now();            2022-07-14 16:35:07     //输出系统当前日期加时间    
                        mysql> select curtime();        16:36:17
                        mysql> insert into t5 values("laoli", 2000, curtime(), curdate(), now());
                        mysql> select year(now());              //组合使用
                        +-------------+
                        | year(now()) |
                        +-------------+
                        |        2022 |
                        +-------------+
                        
表结构
约束条件
        作用是限制如何给字段赋值
        NULL
                是否允许为空          null OR not null        默认是允许
                enum ("对","错") not null default “对”
                mysql> insert into laohe_mysql.t4(name, yourstart) values("老李",2022);           //对指定列进行赋值
        KEY     键值     
                普通索引           index
                唯一索引           unique
                主键              primary key
                外键              foreign key
                全文索引           fulltext 
        DEFAULT 默认值
                默认值：不给字段赋值时，使用默认值
                默认不定义时，是null
                定义default值 要与字段类型匹配
        Extra
                额外设置 默认都没有额外设置
修改表结构
        命令 alter table 库名.表名 执行动作
                执行动作
                        添加新字段
                                add 字段名 类型 【约束条件】；                  //默认添加在末尾
                                add 字段名 类型 【约束条件】 after 字段名；      //指定到某字段后面
                                add 字段名 类型 【约束条件】 first；            //添加到最前面
                                mysql> alter table t9 add (新增1 int(10), 新增2 char(10) not null default "呵呵");    //不涉及挪位置，可以多个,可以括号
                                mysql> alter table t9 add 新增5 char(10) after name;
                                mysql> alter table t9 add  新增4  char(10) first;         //涉及挪位置时，不能用括号
                        修改字段类型
                                modify
                                修改的字段类型不能与已存储的数据冲突
                                alter table 库名.表名 modify 字段名 类型（宽度） 约束条件 【after 字段名 | first】
                                mysql> alter table laohe_mysql.t4 modify yourstart int(5) not null default 2 after birthday;
                        修改字段名
                                change 既能改名，又能改类型
                                alter table 库名.表名 change 源字段名 新字段名 类型（宽度） 约束条件
                                mysql> alter table laohe_mysql.t4 change yourstart 年 year;
                        删除字段
                                drop
                                alter table 库名.表名 drop 字段名；
                                mysql> alter table t4 drop 新字段2；
                        修改表名
                                rename
                                alter table 库名.表名 rename 新表名；
                                mysql> alter table 学生表2 rename stu2;            //修改表名，不是修改字段名；修改字段名用change
                                不要改库名，改完库名，找不到数据
MYSQL键值
        MYSQL键值概述
                键值类型
                        普通索引 index
                                索引是什么
                                        类似于书的目录
                                        对表中的字段进行排序
                                        索引类型包括
                                                Btree           二叉树，一个主节点下有且只有两个子节点
                                                B+tree
                                                hash
                                        索引的优缺点
                                                优点
                                                        通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性
                                                        加快数据的查询范围
                                                        数据的查询诉求远大于写的诉求！！
                                                缺点
                                                        对表进行数据的增删改，索引也要动态调整，降低了数据的维护速度
                                                        索引要占物理空间
                                  使用规则
                                        一个表可以有多个index字段
                                        字段的值允许重复，且可以赋NULL值
                                        通常吧作为查询条件的字段设置为index字段
                                        index字段标识是MUL
                                  创建索引
                                        建表时，创建索引
                                                create table 库.表（字段列表 ,index(字段名1)， index（字段名2））;
                                        在已有表中创建索引
                                                create index 索引名 on 表名（字段）；
                                        查看索引字段
                                                基本查看    desc 表名；中的key列
                                                详细查看    show index from 表名 \G；          //\G竖着显示，默认横着
                                        删除索引
                                                drop index 索引名 on 表名；
                                        mysql> create table t2 ( 
                                            -> name char(10),
                                            -> age int,
                                            -> class char(10),
                                            -> email char(32),
                                            -> index(name), index(age)
                                            -> ) DEFAULT CHARSET=utf8;
                                        mysql> create table t2 ( name char(10), age int, class char(10), email char(32), index(name), index(age) ) DEFAULT CHARSET=utf8;                \\索引名可以和表名不一致,这样创建的index默认是列名，不支持多列一个index名，最好别这样
                                        index这种key_name是自定义的，primart key 的key_name固定是PRIMARY
                                        mysql> desc t2;
                                                +-------+----------+------+-----+---------+-------+
                                                | Field | Type     | Null | Key | Default | Extra |
                                                +-------+----------+------+-----+---------+-------+
                                                | name  | char(10) | YES  | MUL | NULL    |       |
                                                | age   | int(11)  | YES  | MUL | NULL    |       |
                                                | class | char(10) | YES  |     | NULL    |       |
                                                | email | char(32) | YES  |     | NULL    |       |
                                                +-------+----------+------+-----+---------+-------+
                                       mysql> show index from t2 \G;
                                       mysql> create index class on t2(class);          //已有表，新增index
                                       mysql> create index laohe on t2(class, email);   //多列数据，一张表；感觉应该新建表，再建index
                                       mysql> drop index age on t2;
                                       mysql> show index from t2 \G;
                                       mysql> insert into t2 values("老何", 20, "一班", "7455@.com"),("老李",520, "二班", "hejian@.com");
                                       
                        唯一索引 unique
                        主键 primary key
                                使用规则
                                        字段不允许重复，且不允许赋null值                               //证件：身份证等
                                        一个表中只能有一个primary key字段
                                        多个字段都可作为主键，成为符合主键，必须一起创建
                                        主键字段的标志是PRI
                                        主键通常与auto_increment连用                                //自增长 i++
                                        通常把表中唯一标识记录的字段设置为主键；记录编号字段              //序号
                                        为了，不空且不重复
                                创建主键
                                        建表时，创建主键字段
                                                mysql> create table t10(
                                                    -> name char(10),
                                                    -> id int primary key)
                                                    -> DEFAULT CHARSET=utf8;
                                                mysql> create table t11( name char(10), id int, primary key(name)) DEFAULT CHARSET=utf8;        //两种写法都可以
                                                mysql> insert into t11 values("老李",10);
                                                mysql> insert into t11 values("老李",10);         //name是主键，不能同名重复
                                                mysql> insert into t11 values(null,10);          //不能赋空值
                                        在已有表里，创建主键字段
                                                alter table 表名 add primary key（字段）
                                                mysql> alter table t11 drop primary key;        //删除主键
                                                mysql> alter table t11 add primary key(name);
                                                mysql> create index XXX on t11(name, id);
                                                index 支持定义key_name名称，可以把多列放一个index
                                                mysql> select name from t11 where name is null;
                                                查找name是否有为空
                                  创建符合主键        多个符合主键的赋值不全部一样即可
                                        alter table 表名 add primary key（字段名列表）
                                        与auto_increment连用
                                        PRI              PRI
                                        班级              姓名              是否缴费
                                        一班              老张              是
                                        一班              老张                              不准存在
                                        一班              老李              是               可以存在
                                        新表中创建主键；
                                        mysql> create table t3 (class char(10), name char(10), money enum("yes", "no"), primary key(class, name)) DEFAULT CHARSET=utf8;
                                        设置主键前面必须加逗号
                                        PRI              PRI               PRI     
                                        班级              姓名              是否缴费
                                        一班              老张              是
                                        一班              老张              是               不准存在
                                        一班              老李              是               
                                        一班              老李              否               可以存在
                                        已有表，创建主键
                                        修改主键？不能修改，只能先删除，再新建
                                        mysql> alter table t3 drop primary key;
                                        mysql> delete from t3；                  //删除t3下所有内容；如果不影响（无空值，无全部重复）可以不删
                                        mysql> alter table t3 add primary key(class, name, money);
                                        与auto_increment（自增长）连用，不用赋值，自动增长.在desc中的extra中显示
                                        mysql> create table t1 (stu_name int(7) primary key autoincrement, name char(7), age int(7)) DEFAULT CHARSET=utf8;
                                        primary key 和 auto_increment 中primary key 可前可后，auto_increment只能前面
                                        mysql> insert into t1(name, age) values("老赵", 12);
                                        mysql> insert into t1 values(null, "老张", 16);
                                        下面这种方法不推荐
                                        已有表设置主键+auto_increment
                                        mysql> alter table t11 drop primary key;                //先把之前的主键删除
                                        mysql> alter table t11 add 序号 int(7) primary key auto_increment first;          //新增列，first放最前面会报错
                        外键 oreign key
                                外键功能
                                        插入记录时，字段值在另一个字段值的范围内
                                        字段的值在另一张表
                                        员工表
                                                姓名              编号              XXX
                                                老张              01
                                                老李              02
                                        工资表
                                                name             工资
                                                老张              1毛
                                                老李              2毛
                                        工资表的name做成外键，参考员工表表的姓名
                                        
                                        
                                使用规则
                                        表存储引擎必须是innodb
                                                create table (XXX, XXX) DEFAULT CHARSET=utf8 engine=innodb;
                                        字段类型要一致
                                        被参照字段必须要是索引类型的一种（primary key）
                                                被参照字段不能为空，也不能重复，所以建议搞成primary key
                                创建外键
                                        create table 表名 (字段名列表, 
                                                foreign key（字段名）                //外键名
                                                references 表名（字段名）              //指定外表表格字段
                                                on update cascade                       //同步更新
                                                on delete cascade                       //删除同步
                                                ) DEFAULT CHARSET=utf8                  //编码，是否需要逗号?不需要逗号
                                                engine=innodb;                          //指定引擎
                                        案例1：以序号为参照外键
                                        mysql> create table 员工表 (序号 int(7) primary key auto_increment, 姓名 char(10), 性别 enum("男", "女") ) DEFAULT CHARSET=utf8 engine=innodb;
                                        mysql> insert into 员工表(姓名, 性别) values("老张", "男"), ("老李", "女");
                                        mysql> create table 工资表 (工资id int(7), 薪资 float(7,2), foreign key(工资id) references 员工表(序号) on update cascade on delete cascade) DEFAULT CHARSET=utf8 engine=innodb;
                                        名字会重复，序号是唯一固定的；用工资表的工资id对于用户表的序号；
                                        foreign key（表值） 这个份和 references 表.（表值）是对应的；
                                        被参照字段必须是主键！；
                                        
                                        案例2：以姓名为参照外键
                                        mysql> create table 工资表1 (姓名 char(10) primary key, 性别 enum("男", "nv")) DEFAULT CHARSET=utf8 engine=innodb;
                                        工资表1是被参照，工资表2是参照；
                                        工资表1中被参照的必须是primary key
                                        mysql> create table 工资表2 (工资姓名 char(10), 薪资 float(7,2), foreign key(工资姓名) references 工资表1(姓名) on update cascade on delete cascade) DEFAULT CHARSET=utf8 engine=innodb;
                                        mysql> alter table 工资表2 add primary key(工资姓名);          //也可以创建时搞
                                        工资表2的工资姓名设置为主键
                                        同一列表，既可以时主键也可以是外键
                                        
                                        mysql> update 工资表1 set 姓名=老何 where 姓名="老何";
                                        修改工资表1，工资表2对应的值也会变化
                                        mysql> select * from 工资表1;
                                        mysql> select * from 工资表2;
                                        
                                        删除工资表2的外键
                                        先查外键名称
                                        mysql> show create table 工资表2;
                                                //CONSTRAINT `工资表2_ibfk_1`
                                        mysql> alter table 工资表2 drop foreign key 工资表2_ibfk_1;
                        全文索引 fulltext 

数据的导入和导出
        数据导入默认检索的路径
                查看
                        mysql> show variables like "%file%";
                        mysql> show variables like "secure_file_priv";
                        mysql> system ls -ld /var/lib/mysql-files/;         //系统命令执行
                        /var/lib/mysql-files
                        默认的导出导入命令
                修改
                        mysql> system mkdir -p /myload;
                        mysql> system chown mysql /myload             //文件夹设置权限,换所有者
                        mysql> system vim /etc/my.cnf;
                        secure_file_priv="/myload"
                        
                        systemctl restart mysqld                        //重启服务
                        mysql> show variables like "%secure_file%";
                        
        什么事数据导入
                什么是数据导入
                        把系统文件的内容，存到数据库服务器的表中
                命令格式
                        load data infile “目录名/文件名”
                        into table 库名.表名
                        fields terminated by “分隔符”               //区分文件列
                        lines terminated by “\n";                       //区分文件行
                例子     //把系统用户信息导入（/etc/passwd） db3.user表里
                        建库
                        mysql> create dababase db3;
                        mysql> use db3;
                        建表（表结构根据文件内容创建）
                        mysql> create table db3.user (用户名 char(10), 口令 char(5), 用户标识 int(5), 组标识 int(5), 描述 char(7), 主路径 char(7), 登录路径 char(5)) DEFAULT CHARSET=utf8 engine=innodb;
                        把文件拷贝到/load(secure_file)
                        mysql> system cp /etc/passwd /myload;
                        mysql> system cat /myload/passwd;
                        root:x:0:0:root:/root:/bin/bash
                        用户名 口令 用户标识 组标识 描述 登录路径
                        
                        如果表的类型不符合（字段太短），就导不进去
                        mysql> alter table user modify 描述 varchar(100);         //修改字段类型，太短了放不下
                        mysql> alter table user modify 用户名 char(100);
                        mysql> alter table user change 主目录 主路径 char(100);       //change技能改列明，也能改类型，语法和modify有些区别
                        mysql> alter table user change 登录路径 登录路径 char(100);
                        
                        导入数据
                        load data infile "/myload/passwd" into table db3.user fields terminated by ":" lines terminated by "\n";
                        mysql> load data infile "/myload/passwd" into table db3.user fields terminated by ":" lines terminated by "\n";
                        mysql> select * from user;
                        
        数据的导出
                什么事数据导出
                        把表记录导出到系统文件中
                命令格式
                        select命令 into outfile “目录/文件名”；      //直接导出不指定格式
                        select命令 into outfile “目录/文件名” fields terminated by “分隔符”；
                        select命令 into outfile “目录/文件名” fields terminated by “分隔符” lines terminated by "\n";
                例子
                        mysql> select * from 员工表 into outfile "/myload/员工表";
                        mysql> select * from 员工表 into outfile "/myload/员工表2" fields terminated by "------";
                        mysql> select * from 员工表 into outfile "/myload/员工表3" fields terminated by "---" lines terminated by "\n\n";
                        mysql> select * from 员工表 where 序号 <=2 into outfile "/myload/员工表";       //可以加条件
                        mysql> system cat /myload/员工表3;
        
管理表记录
        增加表记录 insert into
                语法格式 //新添加的的记录，追加在末尾
                        添加一条记录，给所有列赋值
                                insert into 库名.表名 values(XXX,XXX...);
                        添加多条记录，给所有列赋值
                                insert into 库名.表名 values(XXX,XXX...), (XXX,XXX...);
                        添加一条记录，给指定的列赋值
                                insert into 库名.表名(列1) values(XXX,XXX...);
                                mysql> alter table user add id int(10) primary key auto_increment first;                //缺ID加一列
                                mysql> insert into db3.user(用户名, 口令, 用户标识, 组标识, 描述, 主路径, 登录路径) values("老何", "x", 10000, 100001, "呵呵", "/root", "/bin/bash");
                                insert into不需要加table
                                mysql> insert into db3.user values(null, "老何", "x", 10000, 100001, "呵呵", "/root", "/bin/bash");         //这样夜宵
                                mysql> select * from db3.user where id >= 20;
                        添加多条记录，给指定的列赋值
                                insert into 库名.表名(列1, 列2, XXX) values(XXX,XXX...);
                注意事项
                        字段值要与字段类型相匹配；
                        字符类型的，要用“”引号引起来，其他类型都不要引；
                        依次给所有字段赋值时，字段名可以省略；
                        只给部分字段赋值时，必须明确的写出对应字段的名称；
                        没有赋值的字段使用默认值或自增长赋值。
        查询表记录 select
                语法格式
                        select 字段名列表 from 库名.表名 where条件         //字段列表控制列，where控制行
                        select * from 库名.表名
                                mysql> use db3;
                                mysql> select * from user;
                                mysql> select 用户名, id, 口令 from user where id <=5;
                                不能加括号，（用户名, id, 口令）这样会显示不出来；
                注意事项        
        更新表记录 update 修改字段的值
                语法格式
                        批量更新
                                update 库名.表名 set 字段名=值， 字段名=值， 字段名=值；
                                不加条件的话，所有行的内容都会被改掉；
                        条件匹配更新
                                update 库名.表名 set 字段名=值， 字段名=值， 字段名=值 where条件；
                        mysql> select * from user where id = 1;
                        mysql> update user set id=111 where id = 1;             //id是列名，id=111是把这一列所有内容修改
                        mysql> select * from user where 用户名 = "root";
                        mysql> update user set id=1, 口令=“xxx”, 描述="这是root" where 用户名="root";      //字符类型一定要加“”
                注意事项        
        删除表记录        //delete 以行为单位，删除列用的是 alter table 表 drop 字段名；
                语法格式
                        delete from 表 where条件           //一定要加条件
                        mysql> delete from user where id = 30;
                        mysql> select * from user;
                注意事项        
        
匹配条件          
        基本匹配条件 //查询、更新、删除；新增不需要
                数值比较
                        = > >= < <= !=
                        mysql> select * from user where id <= 5;
                        mysql> select * from user where id >= 组标识;      //可以对比列表项
                        mysql> select id, 用户名, 组标识 from user where id >= 组标识;           //列表项不加括号
                        比较的前后都是数值类型
                字符比较、匹配空、匹配非空
                        =相等 !=不相等 is null为空 is not null不为空
                        前后都必选用引号
                        mysql> select id, 用户名, 口令 from user where 用户名 = "root";
                        mysql> update user set 主路径 = "这是root" where 用户名 = "bin";
                        mysql> select id, 描述, 主路径 from user where 描述 = 主路径;             //对比的是同一行的内容，不同行内容一致的不行
                        mysql> select * from user where 描述 is null;             //”“ ”null“这两种赋值都不是空
                        mysql> select * from user where 描述 is not null;
                范围匹配、去重显示
                        in（值列表）      not in（值列表）        between 数字 and 数字       distinct去重显示
                        mysql> select 用户名,口令 from user where 用户名 in ("root", "bin");    //可以是数值也可以是字符
                        mysql> select 用户名,口令 from user where 口令 not in ("x");           //括号不能省略
                        mysql> select id, 用户名, 口令 from user where id between 10 and 20;         //前面不能加括号
                        mysql> select distinct 口令 from user;            //去重显示
                        mysql> select distinct 口令, 用户名 from user;       //无法实现去重显示
                逻辑匹配 多个匹配条件
                        or 逻辑或
                                mysql> select id, 用户名, 口令 from user where 用户名 = "root" or 口令 = "x";
                        and 逻辑与
                        ！ 或 not 逻辑非
                                mysql> select id, 用户名, 口令 from user where 用户名 != "adm" and 口令 in ("x") and id between 1 and 10;
        高级匹配条件 //查询、更新、删除；新增不需要
                模糊搜索 like
                        where 字段 like ’通配符‘             
                                _ 表示一个字符
                                        mysql> select id, 用户名 from user where 用户名 like "r__t";  //取得是首尾全部，不能中间
                                        mysql> select 用户名 from user where 用户名 regexp 'r..t';    //正则是任意取，不关注开头结尾
                                        mysql> select 用户名 from user where 用户名 like "____";      //正好四个字符的
                                        mysql> select 用户名 from user where 用户名 like "%____%";    //四个字符及以上 ____% %____ _%___ 都可以
                                % 表示0到n个字符
                                        mysql> select 用户名 from user where 用户名 like "%a%";       //包含a字母的全部（a前，a后都包含）
                                        mysql> select 用户名 from user where 用户名 like "a%";        //以a开头的全部
                                        mysql> select 用户名 from user where 用户名 like "r%t";       //
                正则表达式 regexp
                        where 字段 regexp ’正则表达式‘
                                ^ $尾 . []包含 * |
                                mysql> select 用户名 from user where 用户名 regexp '^r';
                                mysql> select 用户名 from user where 用户名 regexp 't$';
                                mysql> select 用户名 from user where 用户名 regexp 'r..t';            //任意位置匹配都可
                                mysql> select 用户名 from user where 用户名 regexp 'ro*ot';
                                mysql> select 用户名 from user where 用户名 regexp 'r[ao]t';
                                mysql> select 用户名 from user where 用户名 regexp 'ro*';
                                mysql> select 用户名 from user where 用户名 regexp '^a|k$';
                                mysql> select 用户名 from user where 用户名 regexp '^[a|t]';          //以a或者t开头
                                mysql> select 用户名 from user where 用户名 regexp '[0-9]';           //包含数字的
                四则运算 + — * % /
                        对象：数字
                        mysql> alter table user add 年龄 int(5) default 18 after 用户名;
                        mysql> select 用户名, 2022 - 年龄 出生年份 from user;                            //运算在前面，可赋值
                        mysql> insert into user(用户名,  年龄) vales("老李",30);
                        mysql> select 用户名, 2022 - 年龄 出生年份 from user where 2022 - 年龄 < 2004;     //出生年份属于无中生有，但是又不保存到表中
                        mysql> update user set 用户标识=用户标识+1  where id < 5;                       //前5个id，用户标识+1
                        mysql> select id, 用户名, 用户标识, 组标识, (用户标识 + 组标识)/2 用户和组标识的平均 from user where id < 5;
                        mysql> select id, 用户名, 用户标识 from user where 用户标识%2 = 0;                 //用户标识为偶数
        操作查询结果 //真的查询后的结果做处理
                聚集函数
                        mysql内置的对数据做统计的命令
                        avg（字段名）
                                mysql> select avg(用户标识) 用户标识平均值 from user;
                        sum（字段名）
                                mysql> select sum(用户标识) 用户标识求和值 from user;
                        min（字段名）
                                mysql> select min(用户标识) 用户标识最小值 from user;
                        max（字段名）
                                mysql> select max(用户标识) 用户标识最大值 from user;
                        count（字段名） 可以不是数值
                                mysql> select count(用户标识) 用户标识计数值 from user;
                                mysql> select count(*) from user;
                                mysql> select count(*) from user where 登录路径 = "/sbin/nologin";
                查询结果排序
                        SQL查询 order by 字段名 【asc|desc】
                        asc ascent 上升
                        desc descent 下降
                        mysql> select id, 用户名 from user order by id desc;
                        mysql> select id, 用户名 from user order by 用户名;
                                字符类型顺序：大写字母，数字，小写字母，汉字
                查询结果分组
                        SQL查询 group by 字段名
                        mysql> select 登录路径 from user group by 登录路径;             //跟去重显示一样？运算过程不一样
                        mysql> select 登录路径 from user where id < 10 group by 登录路径;
                        mysql> select distinct  登录路径 from user;                         //去重
                查询结果过滤
                        SQL查询 having 条件
                        mysql> select 登录路径,id from user having id < 10;
                        mysql> select 登录路径,id from user where 登录路径 in ("/bin/bash") having id < 10;     //having只能放最后
                        mysql> select 登录路径,id from user where 登录路径 in ("/bin/bash") and id < 10;        //结果一样，上面的查询效率更高
                限制查询结果显示行数 limit
                        只显示显示结果前几行
                                mysql> select * from user limit 5;
                                mysql> select * from user order by 用户标识 desc limit 5;           /null是最小的；limit得放到最后
                                按用户标识排序，倒叙top5
                        指定显示行数
                                mysql> select * from user limit 2,5;
MYSQL管理工具
        命令行
        图形工具
                安装软件安装数据库
                        MYSQL-Workbench         跨平台             MYSQl官方提供
                        MYSQL-Front             Windows           开源，轻量级客户端软件
                        Navicat                 Windows           专业，功能强大，商业版
                        phpMyAdmin              浏览器             开源，需要LAMP平台
                PHPMyAdmin
                        https://cloud.tencent.com/developer/article/1726775
                        参考文档
                        php版本低的解决方案
                        Centos7下Yum更新安装PHP5.5,5.6,7.0
                        https://cloud.tencent.com/developer/article/1497003
                        
                        部署环境 LAMP
                                [root@hejian_alicloud ~]# yum -y install httpd php php-mysql
                        启动httpd服务
                                [root@hejian_alicloud ~]# systemctl start httpd
                                [root@hejian_alicloud ~]# systemctl enable httpd                        
                        解压PHPMyAdmin包，并移动到网站目录
                                [root@hejian_alicloud ~]# wget https://files.phpmyadmin.net/phpMyAdmin/2.11.11/phpMyAdmin-2.11.11-all-languages.tar.gz
                                [root@hejian_alicloud ~]# tar -zxvf phpMyAdmin-2.11.11-all-languages.tar.gz 
                                [root@hejian_alicloud ~]# mv phpMyAdmin-2.11.11-all-languages /var/www/html/phpmyadmin
                        配置config.inc.php，指定MySQL服务器地址
                                [root@hejian_alicloud ~]# cd /var/www/html/phpmyadmin/phpMyAdmin-2.11.11-all-languages/
                                [root@hejian_alicloud phpMyAdmin-2.11.11-all-languages]# cp config.sample.inc.php config.inc.php
                                
                                [root@hejian_alicloud phpMyAdmin-2.11.11-all-languages]# vim +17 config.inc.php
                                17 $cfg['blowfish_secret'] = 'plj123'; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */ //cookie参数,随意写点内容
                                31 $cfg['Servers'][$i]['host'] = 'localhost';   //数据库服务器ip地址
                        浏览器访问、使用数据库管理员root登录
        连接脚本（python，php）





























